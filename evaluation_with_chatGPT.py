from datasets import load_dataset
import random
from torch.utils.data import Dataset
import torch
from itertools import islice
import openai
import sys


class RiddleSenseDataset(Dataset):
    DISCRIMINATION_PROMPT = "[QUESTION]\nIs [ANSWER] a correct answer to the riddle?\n[OUTPUT]"
    GENERATION_PROMPT = "[QUESTION]\nThe answer to the riddle is: [ANSWER]"

    def __init__(self, data, max_len, is_generation, is_exact_match):
        self.data = []
        for entry in data:
            question = entry['question']
            for i in range(len(entry['choices']['text'])):
                label = entry['choices']['label'][i]
                answer = entry['choices']['text'][i]
                if not is_generation and not is_exact_match:
                    self.data.append(DataEntry(question, answer, label == entry['answerKey'], 'yes'))
                    self.data.append(DataEntry(question, answer, label == entry['answerKey'], 'no'))
                else:
                    self.data.append(DataEntry(question, answer, label == entry['answerKey']))

        self.max_len = max_len
        self.is_generation = is_generation
        self.is_exact_match = is_exact_match

    def __len__(self):
        return len(self.data)

    def __getitem__(self, index):
        entry = self.data[index]

        if self.is_generation:
            prompt = self.GENERATION_PROMPT
            if self.is_exact_match:
                prompt = prompt.replace('[ANSWER]', "")
            else:
                prompt = prompt.replace('[ANSWER]', entry.answer)
        else:
            prompt = self.DISCRIMINATION_PROMPT
            prompt = prompt.replace('[ANSWER]', entry.answer)

        prompt = prompt.replace('[QUESTION]', entry.question)

        # Will only do so when an output is provided.
        self.prompt = prompt.replace('[OUTPUT]', entry.output)

        if entry.output == "":
            return self.prompt, entry.answer, entry.is_correct
        else:
            return self.prompt, entry.output, entry.is_correct


class DataEntry:
    """
    Input entry in the format, for e.g.,
    'answerKey': 'E',
    'question': 'A man is incarcerated in prison, and as his punishment he has to carry a one tonne bag of sand
    backwards and forwards across a field the size of a football pitch. What is the one thing he can put in it to
    make it lighter?',
    'choices':
            'label': ['A', 'B', 'C', 'D', 'E'],
            'text': ['throw', 'bit', 'gallon', 'mouse', 'hole']
    """

    def __init__(self, question, answer, is_correct, output=""):
        self.question = question.strip()
        self.answer = answer.strip()
        self.is_correct = is_correct
        self.output = output


def get_first_new_token(output, prompt):
        """Return the first nonempty token generated by the model (different from the prompt)."""
        split_prompt = prompt.split()
        split_output = output.split()

        index = len(split_prompt)
        while index < len(split_output):
            token = split_output[index]
            if token != "" and token is not None:
                return token, index
            index += 1

        return None, None


def get_exact_match_for_generation(sample, model):
    sample_set = RiddleSenseDataset(sample, MAX_SEQUENCE_LENGTH,
                                    is_generation=True, is_exact_match=True)

    dataset = []
    for i in range(0, len(sample_set), 5):
        prompt, answer, label = sample_set[i]

        count = 1
        while not label:
            _, answer, label = sample_set[i + count]
            count += 1
        dataset.append((prompt, answer))


    total_score = 0
    for entry in dataset:
        # Generate a response
        completion = openai.Completion.create(
            engine=model,
            prompt=entry[0],
            max_tokens=MAX_SEQUENCE_LENGTH + 10,
            n=K,
            stop=None,
        )

        number_of_matches = 0
        for choice in completion.choices:
            output = choice.text
            token, token_index = get_first_new_token(output, entry[0])

            if token is not None:
                answer_split = entry[1].split(" ")

                idx = 0
                while idx < len(answer_split):
                    if token.lower() == answer_split[idx]:
                        idx += 1
                        token_index += 1
                        if token_index < len(output):
                            token = output[token_index]
                        else:
                            break
                    else:
                        break

                if idx == len(answer_split):
                    number_of_matches += 1

        total_score += number_of_matches / len(completion.choices)

    print(f"Exact match accuracy for generation: {total_score / 100}")


def get_exact_match_for_discrimination(sample, model):
    sample_set = RiddleSenseDataset(sample, MAX_SEQUENCE_LENGTH,
                                    is_generation=False, is_exact_match=True)

    total_score = 0
    for prompt, answer, label in sample_set:
        # Generate a response
        completion = openai.Completion.create(
            engine=model,
            prompt=prompt,
            max_tokens=MAX_SEQUENCE_LENGTH + 10,
            n=K,
            stop=None,
        )

        number_of_matches = 0
        for choice in completion.choices:
            output = choice.text
            token, token_index = get_first_new_token(output, prompt)

            if token is not None:
                if (token.lower() == 'yes' and label) or \
                        (token.lower() == 'no' and not label):
                    number_of_matches += 1

        total_score += number_of_matches / len(completion.choices)

    print(f"Exact match accuracy for discrimination: {total_score / 100}")



# def get_log_prob_for_generation(sample, model):
#     # Split validation set into two.
#     sample_set = RiddleSenseDataset(sample, MAX_SEQUENCE_LENGTH,
#                                     is_generation=True, is_exact_match=False)
#
#     for prompt, answer, label in sample_set:
#         # Generate a response
#         completion = openai.Completion.create(
#             engine=model,
#             prompt=prompt,
#             max_tokens=MAX_SEQUENCE_LENGTH + 10,
#             n=K,
#             stop=None,
#         )




if __name__ == '__main__':
    device = 'cuda:0' if torch.cuda.is_available() else 'cpu'
    print(f"Using: {device}\n")

    RANDOM_SEED = 42
    DO_SAMPLE = True
    MAX_SEQUENCE_LENGTH = 160
    K = 2
    BATCH_SIZE = 10

    # Setting the random seed.
    random.seed(RANDOM_SEED)
    torch.manual_seed(RANDOM_SEED)

    # print("\n---- FETCHING MODEL ----")
    # # Define OpenAI API key
    # openai.api_key = "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"
    #
    # Set up the model and prompt
    model = "gpt-3.5-turbo"

    print("\n---- PREPARING DATASET ----")
    original_dataset = load_dataset('riddle_sense')
    sample = list(islice(original_dataset["validation"], 100))

    get_exact_match_for_generation(sample, model)
    get_exact_match_for_discrimination(sample, model)
    get_log_prob_for_generation(sample, model)

