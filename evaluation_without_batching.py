from datasets import load_dataset
import random
from transformers import GPTNeoXForCausalLM, AutoTokenizer, set_seed
import torch
import re
import os
import sys
import numpy as np
from torch.utils.data import Dataset
from itertools import islice


class RiddleSenseDataset(Dataset):
    DISCRIMINATION_PROMPT = "[QUESTION] Is \"[ANSWER]\" a correct answer to the riddle? Yes or no? [OUTPUT]"
    GENERATION_PROMPT = "[QUESTION] The answer to the riddle is: [ANSWER]"

    def __init__(self, data, tokenizer, max_len, is_generation, is_exact_match):
        self.data = []
        for entry in data:
            question = entry['question']
            for i in range(len(entry['choices']['text'])):
                label = entry['choices']['label'][i]
                answer = entry['choices']['text'][i]
                if not is_generation and not is_exact_match:
                    self.data.append(DataEntry(question, answer, label == entry['answerKey'], 'yes'))
                    self.data.append(DataEntry(question, answer, label == entry['answerKey'], 'no'))
                else:
                    self.data.append(DataEntry(question, answer, label == entry['answerKey']))

        self.tokenizer = tokenizer
        self.max_len = max_len
        self.is_generation = is_generation
        self.is_exact_match = is_exact_match

    def __len__(self):
        return len(self.data)

    def __getitem__(self, index):
        entry = self.data[index]

        if self.is_generation:
            prompt = self.GENERATION_PROMPT
            if self.is_exact_match:
                prompt = prompt.replace('[ANSWER]', "")
            else:
                prompt = prompt.replace('[ANSWER]', entry.answer)
        else:
            prompt = self.DISCRIMINATION_PROMPT
            prompt = prompt.replace('[ANSWER]', entry.answer)

        prompt = prompt.replace('[QUESTION]', entry.question)

        # Will only do so when an output is provided.
        self.prompt = prompt.replace('[OUTPUT]', entry.output)

        input_ids = self.tokenizer(self.prompt, return_tensors="pt", truncation=True, padding='max_length',
                                   max_length=self.max_len).input_ids

        if entry.output == "":
            return input_ids, entry.answer, entry.is_correct, self.prompt
        else:
            return input_ids, entry.output, entry.is_correct, self.prompt


class DataEntry:
    """
    Input entry in the format, for e.g.,
    'answerKey': 'E',
    'question': 'A man is incarcerated in prison, and as his punishment he has to carry a one tonne bag of sand
    backwards and forwards across a field the size of a football pitch. What is the one thing he can put in it to
    make it lighter?',
    'choices':
            'label': ['A', 'B', 'C', 'D', 'E'],
            'text': ['throw', 'bit', 'gallon', 'mouse', 'hole']
    """

    def __init__(self, question, answer, is_correct, output=""):
        self.question = question.strip()
        self.answer = answer.strip()
        self.is_correct = is_correct
        self.output = output


def get_first_new_token(output, prompt):
    """Return the first nonempty token generated by the model (different from the prompt)."""
    split_prompt = prompt.split()
    split_output = output.split()

    index = len(split_prompt)
    while index < len(split_output):
        token = split_output[index]
        token = re.sub(r"[^\w\s]", '', token)
        if token != "" and token is not None and token != " " and token.lower() != "a" and token.lower() != 'the' \
                and token.lower() != "an":
            return token, index
        index += 1

    return None, None


def softmax(x):
    """Compute softmax values for each sets of scores in x."""
    e_x = np.exp(x - np.max(x))
    return e_x / sum(e_x) .sum(axis=0)  # only difference


def write_to_file(is_generation, is_exact_match, result):
    if is_generation:
        task = "generation"
    else:
        task = "discrimination"

    if is_exact_match:
        accuracy = "em"
    else:
        accuracy = "lp"

    # Write results
    file = open(f"{os.path.dirname(os.path.abspath(__file__))}/results/{SIZE}_{task}_{accuracy}_K{K}.txt",
                "w")
    file.write(f"{accuracy} for {task} model {SIZE}")
    file.write("\n----------------------\n")
    file.write(f"{result}  | ")
    file.write("\n----------------------\n\n")

    file.close()


def get_exact_match_for_generation(sample_set, model, tokenizer):
    dataset = []
    for i in range(0, len(sample_set), 5):
        input_ids, answer, is_correct, prompt = sample_set[i]

        count = 1
        while not is_correct:
            input_ids, answer, is_correct, prompt = sample_set[i + count]
            count += 1
        dataset.append((input_ids, answer, prompt))

    total_score = 0
    processed = 0
    for entry in dataset:
        processed += 1
        if processed % 50 == 0:
            print(f'Processed {processed}/{len(dataset)}.')
        # Generate a response

        input_ids = entry[0].squeeze(1).to(device)

        with torch.inference_mode():
            outputs = model.generate(input_ids, pad_token_id=tokenizer.eos_token_id, num_return_sequences=K,
                                     do_sample=DO_SAMPLE, max_new_tokens=MAX_SEQUENCE_LENGTH + 10,
                                     use_cache=True, temperature=0.5)
        tokens = tokenizer.batch_decode(outputs, skip_special_tokens=True)

        number_of_matches = 0
        for k in range(K):
            token, token_index = get_first_new_token(tokens[k], entry[2])

            if token is not None:
                token = re.sub(r"[^\w\s]", '', token)
                answer_split = entry[1].split(" ")

                idx = 0
                while idx < len(answer_split):
                    if token.lower() == answer_split[idx]:
                        idx += 1
                        token_index += 1
                        if token_index < len(tokens[k]):
                            token = tokens[k][token_index]
                            token = re.sub(r'[^\w\s]', '', token)
                        else:
                            break
                    else:
                        break

                if idx == len(answer_split):
                    number_of_matches += 1
                    print(f"MATCH!!!")

        total_score += number_of_matches / K

    result = total_score / len(dataset)
    print(f"Exact match accuracy for generation: {result}")
    return result


def get_exact_match_for_discrimination(sample_set, model, tokenizer):
    total_score = 0
    processed = 0
    for input_ids, answer, is_correct, prompt in iter(sample_set):
        processed += 1
        if processed % 50 == 0:
            print(f'Processed {processed}/{len(sample_set)}.')

        input_ids = input_ids.squeeze(1).to(device)

        with torch.inference_mode():
            outputs = model.generate(input_ids, pad_token_id=tokenizer.eos_token_id, num_return_sequences=K,
                                     do_sample=DO_SAMPLE, max_new_tokens=MAX_SEQUENCE_LENGTH + 10,
                                     use_cache=True, temperature=0.5)
        tokens = tokenizer.batch_decode(outputs, skip_special_tokens=True)

        number_of_matches = 0
        for k in range(K):
            token, token_index = get_first_new_token(tokens[k], prompt)

            if token is not None:
                token = re.sub(r"[^\w\s]", '', token)
                if (token.lower() == 'yes' and is_correct) or \
                        (token.lower() == 'no' and not is_correct):
                    number_of_matches += 1
                    print(f"MATCH!!!")

        total_score += number_of_matches / K

    result = total_score / len(sample_set)
    print(f"Exact match accuracy for discrimination: {result}")
    return result


def get_generation_log_accuracy(sample_set, model, tokenizer):
    processed = 0
    sum_log_probabilities = 0
    for i in range(0, len(sample_set), 5):
        processed += 5
        if processed % 50 == 0:
            print(f'Processed {processed}/{len(sample_set)}.')

        input_ids_1, answer_1, is_correct_1, _ = sample_set[i]
        input_ids_2, answer_2, is_correct_2, _ = sample_set[i+1]
        input_ids_3, answer_3, is_correct_3, _ = sample_set[i+2]
        input_ids_4, answer_4, is_correct_4, _ = sample_set[i+3]
        input_ids_5, answer_5, is_correct_5, _ = sample_set[i+4]

        input_ids = torch.stack((input_ids_1, input_ids_2, input_ids_3, input_ids_4, input_ids_5))
        answers = [answer_1, answer_2, answer_3, answer_4, answer_5]
        labels = [is_correct_1, is_correct_2, is_correct_3, is_correct_4, is_correct_5]
        input_ids = input_ids.squeeze(1).to(device)
        with torch.inference_mode():
            outputs = model.generate(input_ids, pad_token_id=tokenizer.eos_token_id, num_return_sequences=K,
                                     do_sample=DO_SAMPLE, max_new_tokens=MAX_SEQUENCE_LENGTH + 10,
                                     use_cache=True, return_dict_in_generate=True, output_scores=True,
                                     temperature=0.5)
        gen_sequences = outputs.sequences[:, input_ids.shape[-1]:]
        scores = torch.stack(outputs.scores, dim=1)
        gen_probs = torch.gather(scores, 2, gen_sequences[:, :, None]).squeeze(-1)

        probabilities = []
        index = 0
        for j in range(5):
            # Deal with multi-word/long tokens.
            # Assumption: sum the probabilities of the parts.
            # https://stackoverflow.com/questions/59435020/get-probability-of-multi-token-word-in-mask-position
            answer = answers[j]
            prob = 0
            token_index = len(input_ids[j]) - 1
            token = tokenizer.decode(input_ids[j][token_index])
            for k in range(K):
                while token in answer:
                    prob += gen_probs[index][token_index].item()
                    # Won't turn into an infinite loop since we put the answer at the end ourselves.
                    token_index -= 1
                    token = tokenizer.decode(input_ids[j][token_index])
                index += 1
            probabilities.append(prob / K)

        normalised_probabilities = softmax(probabilities)

        for j in range(5):
            if labels[j]:
                sum_log_probabilities += normalised_probabilities[j]

    result = 5 * sum_log_probabilities / len(sample_set)
    print(f"Log match accuracy: {result}")
    return result


def get_discrimination_log_accuracy(sample_set, model, tokenizer):
    processed = 0
    sum_log_probabilities = 0

    for i in range(0, len(sample_set), 2):
        processed += 2
        if processed % 50 == 0:
            print(f'Processed {processed}/{len(sample_set)}.')

        # for "yes"
        input_ids_yes, _, label, _ = sample_set[i]
        # for "no"
        input_ids_no, _, _, _ = sample_set[i + 1]

        input_ids = torch.stack((input_ids_yes, input_ids_no))
        input_ids = input_ids.squeeze(1).to(device)

        with torch.inference_mode():
            outputs = model.generate(input_ids, pad_token_id=tokenizer.eos_token_id, num_return_sequences=K,
                                     do_sample=DO_SAMPLE, max_new_tokens=MAX_SEQUENCE_LENGTH + 10,
                                     temperature=0.5, return_dict_in_generate=True, output_scores=True,
                                     use_cache=True, )
        gen_sequences = outputs.sequences[:, input_ids.shape[-1]:]
        scores = torch.stack(outputs.scores, dim=1)
        gen_probs = torch.gather(scores, 2, gen_sequences[:, :, None]).squeeze(-1)

        probabilities = []
        for j in range(2):
            prob = 0
            # The answer yes/no is always the last token and won't be split.
            token_index = len(input_ids[j]) - 1

            for k in range(K):
                prob += gen_probs[k+j][token_index].item()
            probabilities.append(prob / K)

        normalised_probabilities = softmax(probabilities)
        if label:
            sum_log_probabilities += normalised_probabilities[0]
        else:
            sum_log_probabilities += normalised_probabilities[1]

    result = 2 * sum_log_probabilities / len(sample_set)
    print(f"Log match accuracy: {result}")
    return result


if __name__ == '__main__':
    device = 'cuda:0' if torch.cuda.is_available() else 'cpu'
    print(f"Using: {device}\n")

    is_generation = sys.argv[1] == '0'
    print(f"IS GENERATION: {is_generation}")
    is_exact_match = sys.argv[2] == '0'
    print(f"IS EXACT MATCH: {is_exact_match}")
    SIZE = sys.argv[3]  # 70M, 160M, 410M, 1B, 1.4B, 2.8B, 6.9B, and 12B.
    print(f"MODEL SIZE: {SIZE}")
    K = int(sys.argv[4])
    print(f"K: {K}")

    # is_generation = True
    # is_exact_match = True
    # SIZE = "70m"
    # K = 2

    RANDOM_SEED = 42
    DO_SAMPLE = True
    MAX_SEQUENCE_LENGTH = 160
    REVISION = "step143000"
    MODEL_NAME = f'EleutherAI/pythia-{SIZE}-deduped'
    CACHE_DIR = f'{os.path.dirname(os.path.abspath(__file__))}/pythia-{SIZE}-deduped/{REVISION}'

    # Setting the random seed.
    random.seed(RANDOM_SEED)
    torch.manual_seed(RANDOM_SEED)
    set_seed(RANDOM_SEED)

    print("\n---- PREPARING DATASET ----")
    original_dataset = load_dataset('riddle_sense')

    tokenizer = AutoTokenizer.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_DIR,
    )

    tokenizer.pad_token = tokenizer.eos_token
    tokenizer.padding_side = 'left'

    # data = islice(original_dataset["validation"], 10)
    data = original_dataset["validation"]

    eval_set = RiddleSenseDataset(data, tokenizer, MAX_SEQUENCE_LENGTH,
                                  is_generation=is_generation, is_exact_match=is_exact_match)

    print("\n---- DOWNLOADING MODEL ----")
    model = GPTNeoXForCausalLM.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_DIR,
        torch_dtype=torch.float16,
        low_cpu_mem_usage=True,
    )
    model.to(device)

    if is_generation:
        print(f"\n---- GENERATION for {SIZE}----\n")
        if is_exact_match:
            result = get_exact_match_for_generation(eval_set, model, tokenizer)
        else:
            result = get_generation_log_accuracy(eval_set, model, tokenizer)
    else:
        print(f"\n---- DISCRIMINATION for {SIZE}----\n")

        if is_exact_match:
            result = get_exact_match_for_discrimination(eval_set, model, tokenizer)
        else:
            result = get_discrimination_log_accuracy(eval_set, model, tokenizer)

    write_to_file(is_generation, is_exact_match, result)



