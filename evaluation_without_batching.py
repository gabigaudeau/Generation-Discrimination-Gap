from datasets import load_dataset
import random
from transformers import GPTNeoXForCausalLM, AutoTokenizer, set_seed
from torch.utils.data import DataLoader
import torch
import numpy as np
import os
import sys
from torch.utils.data import Dataset
from itertools import islice


class RiddleSenseDataset(Dataset):
    DISCRIMINATION_PROMPT = "[QUESTION]\nIs [ANSWER] a correct answer to the riddle?\n[OUTPUT]"
    GENERATION_PROMPT = "[QUESTION]\nThe answer to the riddle is: [ANSWER]"

    def __init__(self, data, tokenizer, max_len, is_generation, is_exact_match):
        self.data = []
        for entry in data:
            question = entry['question']
            for i in range(len(entry['choices']['text'])):
                label = entry['choices']['label'][i]
                answer = entry['choices']['text'][i]
                if not is_generation and not is_exact_match:
                    self.data.append(DataEntry(question, answer, label == entry['answerKey'], 'yes'))
                    self.data.append(DataEntry(question, answer, label == entry['answerKey'], 'no'))
                else:
                    self.data.append(DataEntry(question, answer, label == entry['answerKey']))

        self.tokenizer = tokenizer
        self.max_len = max_len
        self.is_generation = is_generation
        self.is_exact_match = is_exact_match

    def __len__(self):
        return len(self.data)

    def __getitem__(self, index):
        entry = self.data[index]

        if self.is_generation:
            prompt = self.GENERATION_PROMPT
            if self.is_exact_match:
                prompt = prompt.replace('[ANSWER]', "")
            else:
                prompt = prompt.replace('[ANSWER]', entry.answer)
        else:
            prompt = self.DISCRIMINATION_PROMPT
            prompt = prompt.replace('[ANSWER]', entry.answer)

        prompt = prompt.replace('[QUESTION]', entry.question)

        # Will only do so when an output is provided.
        self.prompt = prompt.replace('[OUTPUT]', entry.output)

        input_ids = self.tokenizer(self.prompt, return_tensors="pt", truncation=True, padding='max_length',
                                   max_length=self.max_len).input_ids

        if entry.output == "":
            return input_ids, entry.answer, entry.is_correct, self.prompt
        else:
            return input_ids, entry.output, entry.is_correct, self.prompt


class DataEntry:
    """
    Input entry in the format, for e.g.,
    'answerKey': 'E',
    'question': 'A man is incarcerated in prison, and as his punishment he has to carry a one tonne bag of sand
    backwards and forwards across a field the size of a football pitch. What is the one thing he can put in it to
    make it lighter?',
    'choices':
            'label': ['A', 'B', 'C', 'D', 'E'],
            'text': ['throw', 'bit', 'gallon', 'mouse', 'hole']
    """

    def __init__(self, question, answer, is_correct, output=""):
        self.question = question.strip()
        self.answer = answer.strip()
        self.is_correct = is_correct
        self.output = output


def get_first_new_token(output, prompt):
    """Return the first nonempty token generated by the model (different from the prompt)."""
    split_prompt = prompt.split()
    split_output = output.split()

    index = len(split_prompt)
    while index < len(split_output):
        token = split_output[index]
        if token != "" and token is not None:
            return token, index
        index += 1

    return None, None


def normalise_log_probabilities(log_prob):
    # Convert to non-log probabilities.
    prob = np.exp(np.array(log_prob))
    # Normalise the probabilities.
    return [p / sum(prob) for p in prob]


def write_to_file(is_generation, is_exact_match, result):
    if is_generation:
        task = "generation"
    else:
        task = "discrimination"

    if is_exact_match:
        accuracy = "em"
    else:
        accuracy = "lp"

    # Write results
    file = open(f"{os.path.dirname(os.path.abspath(__file__))}/results/{SIZE}_{task}_{accuracy}_b{BATCH_SIZE}_K{K}.txt",
                "w")
    file.write(f"{accuracy} for {task} model {SIZE}")
    file.write("\n----------------------\n")
    file.write(f"{result}  | ")
    file.write("\n----------------------\n\n")

    file.close()


def get_generation_log_accuracy(model, tokenizer, dataset):
    def get_discrimination_log_accuracy(model, tokenizer, dataset):
        total_outputs = 0
        sum_log_probabilities = 0

        for i in range(0, len(dataset), 5):
            total_outputs += 1
            if total_outputs % 100 == 0:
                print(f'Processed {total_outputs} data entries.')

                # for "yes"
                input_ids_yes, answer_yes, label_yes, _ = dataset[i]
                # for "no"
                input_ids_no, answer_no, label_no, _ = dataset[i + 1]

                input_ids = input_ids_yes + input_ids_no
                answers = answer_yes + answer_no
                labels = label_yes + label_no

                with torch.inference_mode():
                    outputs = model.generate(input_ids, pad_token_id=tokenizer.eos_token_id, num_return_sequences=K,
                                             do_sample=DO_SAMPLE, max_new_tokens=MAX_SEQUENCE_LENGTH + 10,
                                             use_cache=True, return_dict_in_generate=True, output_scores=True)
                    gen_sequences = outputs.sequences[:, input_ids.shape[-1]:]
                    scores = torch.stack(outputs.scores, dim=1).softmax(-1)
                    gen_probs = torch.gather(scores, 2, gen_sequences[:, :, None]).squeeze(-1)

                probabilities = []
                for i in range(len(answers)):
                    log_prob = 0
                    # The answer yes/no is always the last token and won't be split.
                    token_index = len(input_ids[i]) - 1
                    log_prob += gen_probs[i][token_index].item()
                    probabilities.append(log_prob)

                normalised_probabilities = normalise_log_probabilities(probabilities)
                if labels[i]:
                    sum_log_probabilities += normalised_probabilities[0]
                else:
                    sum_log_probabilities += normalised_probabilities[1]

        return sum_log_probabilities / total_outputs


def get_discrimination_log_accuracy(model, tokenizer, dataset):
    total_outputs = 0
    sum_log_probabilities = 0

    for i in range(0, len(dataset), 2):
        total_outputs += 1
        if total_outputs % 100 == 0:
            print(f'Processed {total_outputs} data entries.')

            # for "yes"
            input_ids_yes, answer_yes, label_yes, _ = dataset[i]
            # for "no"
            input_ids_no, answer_no, label_no, _ = dataset[i+1]

            input_ids = input_ids_yes + input_ids_no
            answers = answer_yes + answer_no
            labels = label_yes + label_no

            with torch.inference_mode():
                outputs = model.generate(input_ids, pad_token_id=tokenizer.eos_token_id, num_return_sequences=K,
                                         do_sample=DO_SAMPLE, max_new_tokens=MAX_SEQUENCE_LENGTH + 10,
                                         use_cache=True, return_dict_in_generate=True, output_scores=True)
                gen_sequences = outputs.sequences[:, input_ids.shape[-1]:]
                scores = torch.stack(outputs.scores, dim=1).softmax(-1)
                gen_probs = torch.gather(scores, 2, gen_sequences[:, :, None]).squeeze(-1)

            probabilities = []
            for i in range(len(answers)):
                log_prob = 0
                # The answer yes/no is always the last token and won't be split.
                token_index = len(input_ids[i]) - 1
                log_prob += gen_probs[i][token_index].item()
                probabilities.append(log_prob)

            normalised_probabilities = normalise_log_probabilities(probabilities)
            if labels[i]:
                sum_log_probabilities += normalised_probabilities[0]
            else:
                sum_log_probabilities += normalised_probabilities[1]

    return sum_log_probabilities / total_outputs


if __name__ == '__main__':
    device = 'cuda:0' if torch.cuda.is_available() else 'cpu'
    print(f"Using: {device}\n")

    is_generation = sys.argv[1] == '0'
    print(f"IS GENERATION: {is_generation}")
    is_exact_match = sys.argv[2] == '0'
    print(f"IS EXACT MATCH: {is_exact_match}")
    SIZE = sys.argv[3]  # 70M, 160M, 410M, 1B, 1.4B, 2.8B, 6.9B, and 12B.
    print(f"MODEL SIZE: {SIZE}")
    BATCH_SIZE = int(sys.argv[4])  # Need to be multiple of 2 (yes/no) * 5 (possible answers).
    print(f"BATCH SIZE: {BATCH_SIZE}")
    K = int(sys.argv[5])
    print(f"K: {K}")

    RANDOM_SEED = 42
    DO_SAMPLE = True
    MAX_SEQUENCE_LENGTH = 160
    REVISION = "step143000"
    MODEL_NAME = f'EleutherAI/pythia-{SIZE}-deduped'
    CACHE_DIR = f'{os.path.dirname(os.path.abspath(__file__))}/pythia-{SIZE}-deduped/{REVISION}'

    # Setting the random seed.
    random.seed(RANDOM_SEED)
    torch.manual_seed(RANDOM_SEED)
    set_seed(RANDOM_SEED)

    print("\n---- PREPARING DATASET ----")
    original_dataset = load_dataset('riddle_sense')

    # Split validation set into two.
    half = int(round(len(original_dataset["validation"]) / 2, 0))
    valid_dataset = list(islice(original_dataset["validation"], half))
    eval_dataset = list(islice(original_dataset["validation"], half, len(original_dataset["validation"])))

    tokenizer = AutoTokenizer.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_DIR,
    )

    tokenizer.pad_token = tokenizer.eos_token
    tokenizer.padding_side = 'left'

    # A few pre-processing steps.
    # Do I split it?
    valid_set = RiddleSenseDataset(eval_dataset, tokenizer, MAX_SEQUENCE_LENGTH,
                                   is_generation=is_generation, is_exact_match=is_exact_match)

    print("\n---- DOWNLOADING MODEL ----")
    model = GPTNeoXForCausalLM.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_DIR,
        torch_dtype=torch.float16,
        low_cpu_mem_usage=True,
    )
    model.to(device)

    if is_generation:
        print(f"\n---- GENERATION for {SIZE}----\n")

        if is_exact_match:
            result = 0
            print(f"Exact match accuracy: {result}")
        else:
            result = 0
            print(f"Log match accuracy: {result}")
    else:
        print(f"\n---- DISCRIMINATION for {SIZE}----\n")

        if is_exact_match:
            result = 0
            print(f"Exact match accuracy: {result}")
        else:
            result = get_discrimination_log_accuracy(model, tokenizer, valid_dataset)
            print(f"Log match accuracy: {result}")



